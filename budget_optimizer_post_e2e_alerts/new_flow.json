{
  "TASK_1__SQL_SEGMENT": [
    {
      "new_profiles_with_creation_date": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_profiles_with_creation_date",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_profiles_with_creation_date AS (SELECT latest_profile_id, profile_name, creation_date FROM (SELECT DISTINCT profile_id AS LATEST_PROFILE_ID FROM CLIENT_CATALOG.ams.portfolios WHERE client_id = 5119 AND report_date = DATEADD(day, -2, 2025-07-30)) AS a LEFT JOIN (SELECT profile_id, MIN(report_date) AS creation_date FROM CLIENT_CATALOG.ams.portfolios WHERE client_id = 5119 GROUP BY profile_id) AS b ON (a.LATEST_PROFILE_ID = b.profile_id) INNER JOIN (SELECT profile_id, PROFILE_NAME FROM (SELECT * FROM CLIENT_CATALOG.ams.ams_client_profile_info_overall WHERE client_id = 5119)) AS c ON (a.LATEST_PROFILE_ID = c.profile_id) WHERE DATEDIFF(day, creation_date, 2025-07-30) <= 35)"
      ]
    }
  ],
  "TASK_3__SQL_SEGMENT": [
    {
      "bopz_porfolio_month_budget_breached": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_porfolio_month_budget_breached",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_porfolio_month_budget_breached AS (SELECT spend_table.profile_id, spend_table.profile_name, spend_table.portfolio_id, spend_table.portfolio_name, spend_table.mtd_spend, plan.month_budget, day_spend.active_campaign_count FROM (SELECT CASE WHEN entity_id = '' THEN 'REST' ELSE entity_id END AS entity_id, related_entity_id, SUM(planned_budget) AS month_budget FROM CLIENT_CATALOG.aramus_ds.user_budget_plan_parsed WHERE client_id = 5119 AND entity_type = 'PORTFOLIO' AND feed_date = 2025-07-30 AND month_number = MONTH(DATEADD(day, -1, TO_DATE(2025-07-30))) AND MONTH(DATEADD(day, -1, TO_DATE(2025-07-30))) = MONTH(TO_DATE(2025-07-30)) GROUP BY entity_id, related_entity_id) AS plan LEFT JOIN (SELECT COALESCE(SUM(cost), 0.00) AS mtd_spend, COALESCE(CAST(portfolio_id AS string), 'REST') AS portfolio_id, COALESCE(CAST(portfolio_name AS string), 'Rest') AS portfolio_name, CAST(profile_id AS string) AS profile_id, CAST(profile_name AS string) AS profile_name FROM (SELECT * FROM CLIENT_CATALOG.ams_cubes.campaigns_campaign_workbench WHERE client_id = 5119) WHERE report_date BETWEEN DATEADD(DAY, 1 - DAYOFMONTH(DATEADD(day, -1, TO_DATE(2025-07-30))), DATEADD(day, -1, TO_DATE(2025-07-30))) AND DATEADD(day, -1, TO_DATE(2025-07-30)) GROUP BY portfolio_id, portfolio_name, profile_id, profile_name) AS spend_table ON (plan.entity_id = spend_table.portfolio_id AND plan.related_entity_id = spend_table.profile_id) INNER JOIN (SELECT COUNT(*) AS active_campaign_count, COALESCE(CAST(portfolio_id AS string), 'REST') AS portfolio_id, COALESCE(CAST(portfolio_name AS string), 'Rest') AS portfolio_name, CAST(profile_id AS string) AS profile_id, CAST(profile_name AS string) AS profile_name FROM (SELECT * FROM CLIENT_CATALOG.ams_cubes.campaigns_campaign_workbench WHERE client_id = 5119) WHERE LOWER(campaign_status) = 'enabled' AND report_date = DATEADD(day, -2, TO_DATE(2025-07-30)) GROUP BY portfolio_id, portfolio_name, profile_id, profile_name) AS day_spend ON (plan.entity_id = day_spend.portfolio_id AND plan.related_entity_id = day_spend.profile_id AND day_spend.portfolio_id = spend_table.portfolio_id AND day_spend.profile_id = spend_table.profile_id) WHERE spend_table.mtd_spend > plan.month_budget AND spend_table.mtd_spend > 0 AND (SELECT ANY_VALUE(TEST_RESULT) FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE get_json_object(FAILED_TESTS, '$.testName') = 'Plan Check' AND client_id = 5119 AND run_date = 2025-07-30) = 'TRUE')"
      ],
      "bopz_level2_month_budget_breached": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_level2_month_budget_breached",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_level2_month_budget_breached AS (SELECT plan.level1_id AS level1_id, plan.level_1 AS level1_name, (SELECT level_name FROM (SELECT * FROM CLIENT_CATALOG.ams_cubes.level_config WHERE client_id = 5119) WHERE level_number = 1) AS level1_type, plan.level2_id AS level2_id, plan.level_2 AS level2_name, (SELECT level_name FROM (SELECT * FROM CLIENT_CATALOG.ams_cubes.level_config WHERE client_id = 5119) WHERE level_number = 2) AS level2_type, CAST(NULL AS string) AS level3_id, CAST(NULL AS string) AS level3_name, CAST(NULL AS string) AS level3_type, CAST(NULL AS string) AS level4_id, CAST(NULL AS string) AS level4_name, CAST(NULL AS string) AS level4_type, CAST(NULL AS string) AS level5_id, CAST(NULL AS string) AS level5_name, CAST(NULL AS string) AS level5_type, spends.mtd_spends AS mtd_spend, plan.month_budget AS month_budget FROM (SELECT level_1, level_2, SUM(planned_budget) AS month_budget, SPLIT_PART(level_key, ':', 1) AS level1_id, SPLIT_PART(level_key, ':', 2) AS level2_id FROM CLIENT_CATALOG.aramus_ds.omni_budget_plan WHERE client_id = 5119 AND month_number = MONTH(DATEADD(day, -1, TO_DATE(2025-07-30))) AND additional_info LIKE '%:\"FALSE:TRUE%' GROUP BY level1_id, level2_id, level_1, level_2) AS plan INNER JOIN (SELECT level_2, COALESCE(SUM(spends), 0.00) AS mtd_spends, SPLIT_PART(level_key, ':', 2) AS level2_id FROM (SELECT * FROM CLIENT_CATALOG.aramus_ds.budget_optimizer_level_spend_weights WHERE client_id = 5119) WHERE MONTH(feed_date) = MONTH(DATEADD(day, -1, TO_DATE(2025-07-30))) AND YEAR(feed_date) = YEAR(DATEADD(day, -1, TO_DATE(2025-07-30))) AND feed_date <= DATEADD(day, -1, TO_DATE(2025-07-30)) GROUP BY level2_id, level_2) AS spends ON (plan.level2_id = spends.level2_id) WHERE spends.mtd_spends > plan.month_budget AND spends.mtd_spends > 0 AND (SELECT ANY_VALUE(TEST_RESULT) FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE get_json_object(FAILED_TESTS, '$.testName') = 'Plan Check' AND client_id = 5119 AND run_date = 2025-07-30) = 'TRUE')"
      ],
      "bopz_level1_month_budget_breached": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_level1_month_budget_breached",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_level1_month_budget_breached AS (SELECT plan.level1_id AS level1_id, plan.level_1 AS level1_name, (SELECT level_name FROM CLIENT_CATALOG.ams_cubes.level_config WHERE level_number = 1 AND client_id = 5119) AS level1_type, CAST(NULL AS string) AS level2_id, CAST(NULL AS string) AS level2_name, CAST(NULL AS string) AS level2_type, CAST(NULL AS string) AS level3_id, CAST(NULL AS string) AS level3_name, CAST(NULL AS string) AS level3_type, CAST(NULL AS string) AS level4_id, CAST(NULL AS string) AS level4_name, CAST(NULL AS string) AS level4_type, CAST(NULL AS string) AS level5_id, CAST(NULL AS string) AS level5_name, CAST(NULL AS string) AS level5_type, spends.mtd_spends AS mtd_spend, plan.month_budget AS month_budget FROM (SELECT level_1, SUM(planned_budget) AS month_budget, SPLIT_PART(level_key, ':', 1) AS level1_id FROM CLIENT_CATALOG.aramus_ds.omni_budget_plan WHERE client_id = 5119 AND month_number = MONTH(DATEADD(day, -1, TO_DATE(2025-07-30))) AND additional_info LIKE '%:\"TRUE%' GROUP BY level1_id, level_1) AS plan INNER JOIN (SELECT level_1, COALESCE(SUM(spends), 0.00) AS mtd_spends, SPLIT_PART(level_key, ':', 1) AS level1_id FROM (SELECT * FROM CLIENT_CATALOG.aramus_ds.budget_optimizer_level_spend_weights WHERE client_id = 5119) WHERE MONTH(feed_date) = MONTH(DATEADD(day, -1, TO_DATE(2025-07-30))) AND YEAR(feed_date) = YEAR(DATEADD(day, -1, TO_DATE(2025-07-30))) AND feed_date <= DATEADD(day, -1, TO_DATE(2025-07-30)) GROUP BY level1_id, level_1) AS spends ON (plan.level1_id = spends.level1_id) WHERE spends.mtd_spends > plan.month_budget AND spends.mtd_spends > 0 AND (SELECT ANY_VALUE(TEST_RESULT) FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE get_json_object(FAILED_TESTS, '$.testName') = 'Plan Check' AND client_id = 5119 AND run_date = 2025-07-30) = 'TRUE')"
      ]
    },
    {
      "new_portfolios_without_budgets": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_portfolios_without_budgets",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_portfolios_without_budgets AS (SELECT new_portfolios.profile_id, new_portfolios.profile_name, new_portfolios.PORTFOLIO_ID, new_portfolios.PORTFOLIO_NAME, new_portfolios.PORTFOLIO_STATE, new_portfolios.CREATION_DATE, new_portfolios.PROFILE_EXIST, active_count.ACTIVE_CAMPAIGN_COUNT FROM (SELECT a.*, b.profile_name, CASE WHEN (SELECT COUNT(*) FROM CLIENT_CATALOG.aramus_ds.budget_plan WHERE entity_id = a.profile_id AND entity_type = 'PROFILE' AND feed_date = 2025-07-30) > 0 THEN TRUE ELSE FALSE END AS profile_exist FROM (SELECT CAST(PORTFOLIO_ID AS string) AS PORTFOLIO_ID, PORTFOLIO_NAME, profile_id, PORTFOLIO_STATE, CREATION_DATE FROM (SELECT * FROM CLIENT_CATALOG.ams.portfolios WHERE client_id = 5119) WHERE report_date = DATEADD(day, -1, TO_DATE(2025-07-30)) AND LOWER(portfolio_state) = 'enabled' AND TO_DATE(creation_date) >= DATEADD(day, -35, CURRENT_DATE) UNION ALL SELECT 'REST' AS portfolio_id, 'Rest' AS portfolio_name, latest_profile_id AS profile_id, 'enabled' AS portfolio_state, creation_date FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_profiles_with_creation_date) AS a LEFT JOIN (SELECT profile_id, profile_name FROM CLIENT_CATALOG.ams.ams_client_profile_info_overall) AS b ON (a.profile_id = b.profile_id)) AS new_portfolios LEFT JOIN (SELECT CASE WHEN entity_id = '' THEN 'REST' ELSE entity_id END AS entity_id, related_entity_id, SUM(planned_budget) AS portfolio_month_budget FROM (SELECT * FROM CLIENT_CATALOG.aramus_ds.user_budget_plan_parsed WHERE client_id = 5119) WHERE feed_date = 2025-07-30 AND month_number = MONTH(TO_DATE(2025-07-30)) AND entity_type = 'PORTFOLIO' GROUP BY entity_id, related_entity_id) AS month_budget ON (new_portfolios.portfolio_id = month_budget.entity_id AND new_portfolios.profile_id = month_budget.related_entity_id) INNER JOIN (SELECT COUNT(*) AS active_campaign_count, COALESCE(CAST(portfolio_id AS string), 'REST') AS portfolio_id, COALESCE(portfolio_name, 'Rest') AS portfolio_name, CAST(profile_id AS string) AS profile_id, profile_name AS profile_name FROM (SELECT * FROM CLIENT_CATALOG.ams_cubes.campaigns_campaign_workbench WHERE client_id = 5119) WHERE LOWER(campaign_status) = 'enabled' AND report_date = DATEADD(day, -1, TO_DATE(2025-07-30)) GROUP BY portfolio_id, portfolio_name, profile_id, profile_name) AS active_count ON (active_count.portfolio_id = new_portfolios.portfolio_id AND active_count.profile_id = new_portfolios.profile_id) WHERE portfolio_month_budget IS NULL AND ACTIVE_CAMPAIGN_COUNT > 0)"
      ],
      "new_level_entities_without_budget_parsed": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget_parsed",
        "CREATE TABLE IF NOT EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget_parsed (LEVEL1_NAME STRING, LEVEL2_NAME STRING, LEVEL3_NAME STRING, LEVEL4_NAME STRING, LEVEL5_NAME STRING, LEVEL1_ID STRING, LEVEL2_ID STRING, LEVEL3_ID STRING, LEVEL4_ID STRING, LEVEL5_ID STRING, LEVEL1_TYPE STRING, LEVEL2_TYPE STRING, LEVEL3_TYPE STRING, LEVEL4_TYPE STRING, LEVEL5_TYPE STRING, LEVEL_KEY STRING, ACTIVE_CAMPAIGN_COUNT DECIMAL (38, 0), CREATION_TIME DATE)",
        "INSERT INTO CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget_parsed (SELECT REPLACE(LEVEL1_NAME, ':_:', '|'), REPLACE(LEVEL2_NAME, ':_:', '|'), REPLACE(LEVEL3_NAME, ':_:', '|'), REPLACE(LEVEL4_NAME, ':_:', '|'), REPLACE(LEVEL5_NAME, ':_:', '|'), LEVEL1_ID, LEVEL2_ID, LEVEL3_ID, LEVEL4_ID, LEVEL5_ID, LEVEL1_TYPE, LEVEL2_TYPE, LEVEL3_TYPE, LEVEL4_TYPE, LEVEL5_TYPE, LEVEL_KEY, ACTIVE_CAMPAIGN_COUNT, CREATION_TIME FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget)"
      ],
      "bopz_profile_month_budget_breached": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_profile_month_budget_breached",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_profile_month_budget_breached AS (SELECT spend_table.profile_id, spend_table.profile_name, CAST(NULL AS decimal (38, 0)) AS portfolio_id, CAST(NULL AS string) AS portfolio_name, spend_table.mtd_spend, plan.month_budget, day_spend.active_campaign_count FROM (SELECT entity_id, SUM(planned_budget) AS month_budget FROM CLIENT_CATALOG.aramus_ds.user_budget_plan_parsed WHERE client_id = 5119 AND entity_type = 'PROFILE' AND feed_date = 2025-07-30 AND month_number = MONTH(DATEADD(day, -1, TO_DATE(2025-07-30))) AND MONTH(DATEADD(day, -1, TO_DATE(2025-07-30))) = MONTH(TO_DATE(2025-07-30)) GROUP BY entity_id) AS plan LEFT JOIN (SELECT COALESCE(SUM(cost), 0.00) AS mtd_spend, CAST(profile_id AS string) AS profile_id, CAST(profile_name AS string) AS profile_name FROM (SELECT * FROM CLIENT_CATALOG.ams_cubes.campaigns_campaign_workbench WHERE client_id = 5119) WHERE report_date BETWEEN DATEADD(DAY, 1 - DAYOFMONTH(DATEADD(day, -1, TO_DATE(2025-07-30))), DATEADD(day, -1, TO_DATE(2025-07-30))) AND DATEADD(day, -1, TO_DATE(2025-07-30)) GROUP BY profile_id, profile_name) AS spend_table ON (plan.entity_id = spend_table.profile_id) INNER JOIN (SELECT COUNT(*) AS active_campaign_count, CAST(profile_id AS string) AS profile_id, CAST(profile_name AS string) AS profile_name FROM (SELECT * FROM CLIENT_CATALOG.ams_cubes.campaigns_campaign_workbench WHERE client_id = 5119) WHERE LOWER(campaign_status) = 'enabled' AND report_date = DATEADD(day, -1, TO_DATE(2025-07-30)) GROUP BY profile_id, profile_name) AS day_spend ON (plan.entity_id = day_spend.profile_id AND day_spend.profile_id = spend_table.profile_id) WHERE spend_table.mtd_spend > plan.month_budget AND spend_table.mtd_spend > 0 AND (SELECT ANY_VALUE(TEST_RESULT) FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE get_json_object(FAILED_TESTS, '$.testName') = 'Plan Check' AND client_id = 5119 AND run_date = 2025-07-30) = 'TRUE' AND NOT spend_table.profile_id IN (SELECT DISTINCT profile_id FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_porfolio_month_budget_breached))"
      ],
      "bopz_month_budget_breached_wrapper_v2": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_month_budget_breached_wrapper_v2",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_month_budget_breached_wrapper_v2 AS (SELECT amazon AS retailer, CASE WHEN ((SELECT COUNT(*) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_level1_month_budget_breached) > 0 OR (SELECT COUNT(*) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_level2_month_budget_breached) > 0) THEN FALSE ELSE TRUE END AS test_result, CAST('{\n      \"testName\": \"LEVEL2_AND_LEVEL1_WITH_SPEND_GREATER_THAN_MONTH_BUDGET\",\n      \"explanation\": \"Level2 or Level1 with spend greater than month budget\"\n    }' AS string) AS failed_tests, CAST('{\n      \"budgetOptimizer\": {\n        \"emailSent\": false,\n        \"actions_automated\": false\n      }\n    }' AS string) AS actions, ARRAY_AGG(to_json(map('level1_id', string(level1_id), 'level1_name', string(level1_name), 'level1_type', string(level1_type), 'level2_id', string(level2_id), 'level2_name', string(level2_name), 'level2_type', string(level2_type), 'level3_id', string(level3_id), 'level3_name', string(level3_name), 'level3_type', string(level3_type), 'level4_id', string(level4_id), 'level4_name', string(level4_name), 'level4_type', string(level4_type), 'level5_id', string(level5_id), 'level5_name', string(level5_name), 'level5_type', string(level5_type), 'mtd_spend', string(mtd_spend), 'month_budget', string(month_budget)))) AS rule_data, CAST('{\n             \"actions_triggered\": false  \n             }' AS string) AS additional_info FROM (SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_level1_month_budget_breached UNION ALL SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_level2_month_budget_breached))"
      ]
    },
    {
      "new_profiles_without_budgets": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_profiles_without_budgets",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_profiles_without_budgets AS (SELECT c.profile_id, c.profile_name, CAST(NULL AS string) AS portfolio_id, CAST(NULL AS string) AS portfolio_name, CAST(NULL AS string) AS PORTFOLIO_STATE, c.creation_date, CAST(NULL AS string) AS profile_exist, active_count.active_campaign_count FROM (SELECT latest_profile_id AS profile_id, profile_name, creation_date FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_profiles_with_creation_date) AS c LEFT JOIN (SELECT CAST(entity_id AS string) AS profile_id, SUM(planned_budget) AS profile_month_budget FROM (SELECT * FROM CLIENT_CATALOG.aramus_ds.user_budget_plan_parsed WHERE client_id = 5119) WHERE feed_date = 2025-07-30 AND month_number = MONTH(TO_DATE(2025-07-30)) AND entity_type = 'PROFILE' GROUP BY entity_id) AS month_budget ON (c.profile_id = month_budget.profile_id) INNER JOIN (SELECT COUNT(*) AS active_campaign_count, CAST(profile_id AS string) AS profile_id, CAST(profile_name AS string) AS profile_name FROM CLIENT_CATALOG.ams_cubes.campaigns_campaign_workbench WHERE client_id = 5119 AND LOWER(campaign_status) = 'enabled' AND report_date = DATEADD(day, -1, TO_DATE(2025-07-30)) GROUP BY profile_id, profile_name) AS active_count ON (active_count.profile_id = c.profile_id) WHERE active_campaign_count > 0 AND month_budget.profile_month_budget IS NULL AND DATEDIFF(day, creation_date, 2025-07-30) <= 35 AND NOT c.profile_id IN (SELECT DISTINCT (profile_id) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_portfolios_without_budgets))"
      ],
      "new_level_entities_without_budget_wrapper": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget_wrapper",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget_wrapper AS (SELECT 'amazon' AS retailer, CASE WHEN ((SELECT COUNT(*) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget_parsed) > 0) THEN FALSE ELSE TRUE END AS test_result, CAST('{\"testName\":\"NEW_LEVEL_ENTITIES_WITHOUT_BUDGET\", \"explanation\":\"No budget allocated for new entities\"}' AS string) AS failed_tests, CAST('{ \"budgetOptimizer\": { \"emailSent\": false, \"actions_automated\": false } }' AS string) AS actions, ARRAY_AGG(to_json(map('level1_name', string(level1_name), 'level2_name', string(level2_name), 'level3_name', string(level3_name), 'level4_name', string(level4_name), 'level5_name', string(level5_name), 'level1_id', string(level1_id), 'level2_id', string(level2_id), 'level3_id', string(level3_id), 'level4_id', string(level4_id), 'level5_id', string(level5_id), 'level1_type', string(level1_type), 'level2_type', string(level2_type), 'level3_type', string(level3_type), 'level4_type', string(level4_type), 'level5_type', string(level5_type), 'level_key', string(level_key), 'creation_date', string(creation_time), 'active_campaign_count', string(active_campaign_count)))) AS rule_data, CAST('{ \"actions_triggered\": false }' AS string) AS additional_info FROM (SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget_parsed))"
      ],
      "bopz_month_budget_breached_wrapper": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_month_budget_breached_wrapper",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_month_budget_breached_wrapper AS (SELECT amazon AS retailer, CASE WHEN ((SELECT COUNT(*) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_porfolio_month_budget_breached) > 0 OR (SELECT COUNT(*) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_profile_month_budget_breached) > 0) THEN FALSE ELSE TRUE END AS test_result, CAST('{\n      \"testName\": \"PORTFOLIOS_AND_PROFILES_WITH_SPEND_GREATER_THAN_MONTH_BUDGET\",\n      \"explanation\": \"Portfolios or Profiles with spend greater than month budget\"\n    }' AS string) AS failed_tests, CAST('{\n      \"budgetOptimizer\": {\n        \"emailSent\": false,\n        \"actions_automated\": false\n      }\n    }' AS string) AS actions, ARRAY_AGG(to_json(map('profile_id', string(profile_id), 'profile_name', string(profile_name), 'portfolio_name', string(portfolio_name), 'portfolio_id', string(portfolio_id), 'mtd_spend', string(mtd_spend), 'month_budget', string(month_budget), 'active_campaign_count', string(active_campaign_count)))) AS rule_data, CAST('{\n             \"actions_triggered\": false  \n             }' AS string) AS additional_info FROM (SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_porfolio_month_budget_breached UNION ALL SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_profile_month_budget_breached))"
      ]
    },
    {
      "new_portfolios_profiles_without_budgets_wrapper": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_portfolios_profiles_without_budgets_wrapper",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_portfolios_profiles_without_budgets_wrapper AS (SELECT amazon AS retailer, CASE WHEN ((SELECT COUNT(*) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_profiles_without_budgets) > 0 OR (SELECT COUNT(*) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_portfolios_without_budgets) > 0) THEN FALSE ELSE TRUE END AS test_result, CAST('{\"testName\":\"NEW_PORTFOLIOS_PROFILES_WITHOUT_BUDGET\", \n             \"explanation\":\"No budget allocated for new portfolios/profiles\"}' AS string) AS failed_tests, CAST('{\n                \"budgetOptimizer\": {\n                \"emailSent\": false,\n            \"actions_automated\": false    \n              }\n             }' AS string) AS actions, ARRAY_AGG(to_json(named_struct('profile_id', profile_id, 'profile_name', profile_name, 'portfolio_id', portfolio_id, 'portfolio_name', portfolio_name, 'portfolio_state', portfolio_state, 'creation_date', creation_date, 'profile_exist', profile_exist, 'active_campaign_count', active_campaign_count))) AS rule_data, CAST('{\n             \"actions_triggered\": false  \n             }' AS string) AS additional_info FROM (SELECT profile_id AS profile_id, profile_name AS profile_name, portfolio_id AS portfolio_id, portfolio_name AS portfolio_name, PORTFOLIO_STATE AS portfolio_state, creation_date AS creation_date, profile_exist AS profile_exist, active_campaign_count AS active_campaign_count FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_profiles_without_budgets UNION ALL SELECT CAST(profile_id AS string), CAST(profile_name AS string), CAST(portfolio_id AS string), CAST(portfolio_name AS string), CAST(portfolio_state AS string), CAST(creation_date AS string), CAST(profile_exist AS string), CAST(active_campaign_count AS string) FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_portfolios_without_budgets))"
      ]
    },
    {
      "all_monitoring_alerts_rules": [
        "DELETE FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE client_id = 5119 AND run_date = 2025-07-30 AND type = 'MONITORING' AND retailer = amazon",
        "INSERT INTO CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules (SELECT retailer, 5119, CURRENT_TIMESTAMP(), 2025-07-30, 'BUDGET_OPTIMIZER', test_result, failed_tests, actions, 'MONITORING', rule_data, additional_info FROM ((SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_portfolios_profiles_without_budgets_wrapper) UNION ALL (SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_month_budget_breached_wrapper) UNION ALL (SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__new_level_entities_without_budget_wrapper) UNION ALL (SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_5119.e0__bopz_month_budget_breached_wrapper_v2)))"
      ]
    }
  ],
  "total_queries_count": 27
}