{
  "TASK_1__SQL_SEGMENT": [
    {
      "failed_monitoring_tests": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_851.e0__failed_monitoring_tests",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_851.e0__failed_monitoring_tests AS (SELECT CAST(get_json_object(failed_tests, '$.testName') AS string) AS failed_tests, CAST(get_json_object(actions, '$.budgetOptimizer.actions_automated') AS string) AS actions_automated FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE run_date = 2025-08-02 AND client_id = 851 AND source = 'BUDGET_OPTIMIZER' AND TEST_RESULT = FALSE AND type = 'MONITORING' AND retailer = amazon) UNION ALL (SELECT '-1' AS failed_tests, FALSE AS actions_automated)"
      ]
    }
  ],
  "TASK_3__SQL_SEGMENT": [
    {
      "passed_monitoring_alerts": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_851.e0__passed_monitoring_alerts",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_851.e0__passed_monitoring_alerts AS (SELECT * FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE source = 'BUDGET_OPTIMIZER' AND type = 'MONITORING' AND TEST_RESULT = TRUE AND run_date = 2025-08-02 AND client_id = 851 AND retailer = amazon AND NOT get_json_object(failed_tests, '$.testName') IN (SELECT DISTINCT failed_tests FROM CLIENT_VIEW_CATALOG.temp_ccp_851.e0__failed_monitoring_tests))"
      ],
      "failed_monitoring_alert_action_status": [
        "DROP TABLE IF EXISTS CLIENT_VIEW_CATALOG.temp_ccp_851.e0__failed_monitoring_alert_action_status",
        "CREATE TABLE CLIENT_VIEW_CATALOG.temp_ccp_851.e0__failed_monitoring_alert_action_status AS (SELECT retailer, client_id, creation_time, run_date, source, test_result, a.failed_tests AS failed_tests, actions, type, rule_data, CASE WHEN b.action_info IS NULL THEN a.additional_info ELSE b.action_info END AS additional_info FROM ((SELECT retailer, client_id, creation_time, run_date, source, test_result, failed_tests, actions, type, rule_data, additional_info FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE source = 'BUDGET_OPTIMIZER' AND type = 'MONITORING' AND TEST_RESULT = FALSE AND run_date = 2025-08-02 AND retailer = amazon AND client_id = 851) AS a LEFT JOIN (SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_851.e0__monitoring_alert_actions_python) AS b ON get_json_object(a.FAILED_TESTS, '$.testName') = b.failed_tests))"
      ]
    },
    {
      "monitoring_alert_action_status": [
        "DELETE FROM CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules WHERE client_id = 851 AND run_date = 2025-08-02 AND retailer = amazon AND source = 'BUDGET_OPTIMIZER' AND type = 'MONITORING'",
        "INSERT INTO CLIENT_CATALOG.ams_cubes.monitoring_alerts_rules (SELECT retailer, client_id, creation_time, run_date, source, test_result, failed_tests, actions, type, rule_data, additional_info FROM (SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_851.e0__failed_monitoring_alert_action_status UNION ALL SELECT * FROM CLIENT_VIEW_CATALOG.temp_ccp_851.e0__passed_monitoring_alerts))"
      ]
    }
  ],
  "total_queries_count": 8
}